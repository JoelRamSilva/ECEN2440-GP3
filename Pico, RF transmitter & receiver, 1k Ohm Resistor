from machine import Pin, PWM 
import ir_rx
import math, time
import machine
from time import sleep 
from ir_rx.nec import NEC_8
from ir_rx.print_error import print_error

switch = 1

#   Pico pin GP13   -> AIN2
#   Pico pin GP12   -> AIN1
#   any Pico GND    -> GND

# load the MicroPython pulse-width-modulation module for driving hardware
from machine import PWM

from machine import Pin

time.sleep(1) # Wait for USB to become ready


pwm_rate = 2000
ain1A_ph = Pin(12, Pin.OUT) # Initialize GP14 as an OUTPUT
ain2A_en = PWM(13, freq = pwm_rate, duty_u16 = 0)

ain1B_ph = Pin(8, Pin.OUT) # Initialize GP14 as an OUTPUT
ain2B_en = PWM(9, freq = pwm_rate, duty_u16 = 0)
pwm = PWM(Pin(18)) # Set the pin for the PWM object pwm.freq(60) # Set the frequency of the PWM signal 

pwm = min(max(int(2**16 * abs(1)), 0), 65535)

if switch == 0:
    def ir_callback(data, addr, _):
        print("Received NEC command! Data: 0x{data}, Addr: 0x{addr}")
        if data == 0x01:
            print("Motor Foward") # Print to REPL
            ain1A_ph.low()
            ain2A_en.duty_u16(pwm)
        elif data == 0x02:
            print("Motor Backward") # Print to REPL
            ain1A_ph.low()
            ain2A_en.duty_u16(0)
        elif data == 0x03:          #left
            print("Motor Left") # Print to REPL
            ain1A_ph.high()
            ain2A_en.duty_u16(pwm)
            ain1B_ph.low()
            ain2B_en.duty_u16(pwm)
        elif data == 0x04:          #Right
            print("Motor Right") # Print to REPL
            ain1A_ph.low()
            ain2A_en.duty_u16(pwm)
            ain1B_ph.high()
            ain2B_en.duty_u16(pwm)
        else:                       #off
            print("Motor off") # Print to REPL
            ain1A_ph.low()
            ain2A_en.duty_u16(0)
            ain1B_ph.low()
            ain2B_en.duty_u16(0)

    ir_pin = Pin(17, Pin.IN, Pin.PULL_UP)

    ir_receiver = NEC_8(ir_pin, callback=ir_callback)

    ir_receiver.error_function(print_error)


elif switch == 1:
     # create an input pin
    PinA = Pin(10, Pin.IN, Pin.PULL_UP)
    PinB = Pin(11, Pin.IN, Pin.PULL_UP)
    PinC = Pin(12, Pin.IN, Pin.PULL_UP)
    PinD = Pin(13, Pin.IN, Pin.PULL_UP)

    if PinA.value == 1: #foward
        ain1A_ph.low()
        ain2A_en.duty_u16(pwm)
    elif PinB.value == 1: #back
        ain1A_ph.high()
        ain2A_en.duty_u16(pwm)
    elif PinC.value == 1: #left
        ain1A_ph.high()
        ain2A_en.duty_u16(pwm)
        ain1B_ph.low()
        ain2B_en.duty_u16(pwm)
    elif PinD.value == 1: #right
        ain1A_ph.low()
        ain2A_en.duty_u16(pwm)
        ain1B_ph.high()
        ain2B_en.duty_u16(pwm)
    else:               #all off
        ain1A_ph.low()
        ain2A_en.duty_u16(0)
        ain1B_ph.low()
        ain2B_en.duty_u16(0)

while True:
    pass
